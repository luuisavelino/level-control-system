// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  USER
  ENGINEER
  ADMIN

  @@map("role_name")
}

model Role {
  id   Int      @id @default(autoincrement())
  name RoleName @unique

  Users User[]

  @@map("roles")
}

model User {
  uuid             String    @id @default(uuid()) @db.Uuid
  email            String    @unique
  password         String
  firstName        String    @map("first_name")
  lastName         String    @map("last_name")
  city             String
  state            String
  country          String
  phoneNumber      Int       @map("phone_number")
  phoneRegionCode  Int       @map("phone_region_code")
  phoneCountryCode Int       @map("phone_country_code")
  roleId           Int       @default(1) @map("role_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")

  role Role @relation(fields: [roleId], references: [id], onDelete: SetDefault)

  @@map("users")
}

model Worker {
  uuid        String @id @default(uuid()) @db.Uuid
  system_uuid String @db.Uuid

  System System @relation(fields: [system_uuid], references: [uuid], onDelete: Cascade)

  @@map("workers")
}

model System {
  uuid              String    @id @default(uuid()) @db.Uuid
  path              String    @unique
  name              String
  description       String
  enabled           Boolean   @default(false)
  controlUuid       String    @map("control_uuid") @db.Uuid
  schemeUuid        String    @map("scheme_uuid") @db.Uuid
  configurationUuid String?   @map("configuration_uuid") @db.Uuid
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")
  Workers           Worker[]

  Control       Control        @relation(fields: [controlUuid], references: [uuid], onDelete: SetDefault)
  Scheme        Scheme         @relation(fields: [schemeUuid], references: [uuid], onDelete: SetDefault)
  Configuration Configuration? @relation(fields: [configurationUuid], references: [uuid], onDelete: SetNull)

  @@map("systems")
}

enum ControlType {
  PI
  PD
  PID

  @@map("control_type")
}

model Control {
  uuid        String      @id @default(uuid()) @db.Uuid
  name        String
  description String
  type        ControlType
  kp          Float
  ki          Float
  kd          Float
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  deletedAt   DateTime?   @map("deleted_at")
  Systems     System[]

  @@map("controls")
}

model Scheme {
  uuid        String    @id @default(uuid()) @db.Uuid
  name        String
  description String
  setpoint    Float
  minLevel    Float     @map("min_level")
  maxLevel    Float     @map("max_level")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  Systems     System[]

  @@map("schemes")
}

model Configuration {
  uuid             String    @id @default(uuid()) @db.Uuid
  name             String
  scheduleUuid     String?   @map("schedule_uuid") @db.Uuid
  notificationUuid String?   @map("notification_uuid") @db.Uuid
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")
  Systems          System[]

  Schedule     Schedule?     @relation(fields: [scheduleUuid], references: [uuid], onDelete: SetNull)
  Notification Notification? @relation(fields: [notificationUuid], references: [uuid], onDelete: SetNull)

  @@map("configurations")
}

model Schedule {
  uuid           String          @id @default(uuid()) @db.Uuid
  name           String
  startTime      DateTime?       @map("start_time")
  endTime        DateTime?       @map("end_time")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  deletedAt      DateTime?       @map("deleted_at")
  Configurations Configuration[]

  @@map("schedules")
}

enum NotificationLevel {
  INFO
  WARNING
  CRITICAL

  @@map("notification_level")
}

model Notification {
  uuid           String            @id @default(uuid()) @db.Uuid
  name           String
  enabled        Boolean
  level          NotificationLevel
  type           String
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  deletedAt      DateTime?         @map("deleted_at")
  Configurations Configuration[]

  @@map("notifications")
}
